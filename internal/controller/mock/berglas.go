// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/berglassecret_controller.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controller/berglassecret_controller.go -destination=./internal/controller/mock/berglas.go berglasClient
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockberglasClient is a mock of berglasClient interface.
type MockberglasClient struct {
	ctrl     *gomock.Controller
	recorder *MockberglasClientMockRecorder
}

// MockberglasClientMockRecorder is the mock recorder for MockberglasClient.
type MockberglasClientMockRecorder struct {
	mock *MockberglasClient
}

// NewMockberglasClient creates a new mock instance.
func NewMockberglasClient(ctrl *gomock.Controller) *MockberglasClient {
	mock := &MockberglasClient{ctrl: ctrl}
	mock.recorder = &MockberglasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockberglasClient) EXPECT() *MockberglasClientMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockberglasClient) Resolve(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockberglasClientMockRecorder) Resolve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockberglasClient)(nil).Resolve), arg0, arg1)
}

// Version mocks base method.
func (m *MockberglasClient) Version(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockberglasClientMockRecorder) Version(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockberglasClient)(nil).Version), arg0, arg1)
}
